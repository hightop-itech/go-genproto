// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ftu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceOpsClient is the client API for DeviceOps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceOpsClient interface {
	//dam: device manage
	ActivateDevice(ctx context.Context, in *ActivateDeviceReq, opts ...grpc.CallOption) (*Result, error)
	GetDeviceStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceStatusResp, error)
	//params
	GetParam(ctx context.Context, in *ParamReq, opts ...grpc.CallOption) (*ParamResp, error)
	SetParam(ctx context.Context, in *ParamReq, opts ...grpc.CallOption) (*ParamResp, error)
	//upgrade
	Upgrade(ctx context.Context, in *UpgradeDeviceReq, opts ...grpc.CallOption) (*Result, error)
	//files
	SyncFiles(ctx context.Context, in *FileReq, opts ...grpc.CallOption) (*Result, error)
}

type deviceOpsClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceOpsClient(cc grpc.ClientConnInterface) DeviceOpsClient {
	return &deviceOpsClient{cc}
}

func (c *deviceOpsClient) ActivateDevice(ctx context.Context, in *ActivateDeviceReq, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/hightop.ftu.v1.DeviceOps/ActivateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceOpsClient) GetDeviceStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceStatusResp, error) {
	out := new(DeviceStatusResp)
	err := c.cc.Invoke(ctx, "/hightop.ftu.v1.DeviceOps/GetDeviceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceOpsClient) GetParam(ctx context.Context, in *ParamReq, opts ...grpc.CallOption) (*ParamResp, error) {
	out := new(ParamResp)
	err := c.cc.Invoke(ctx, "/hightop.ftu.v1.DeviceOps/GetParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceOpsClient) SetParam(ctx context.Context, in *ParamReq, opts ...grpc.CallOption) (*ParamResp, error) {
	out := new(ParamResp)
	err := c.cc.Invoke(ctx, "/hightop.ftu.v1.DeviceOps/SetParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceOpsClient) Upgrade(ctx context.Context, in *UpgradeDeviceReq, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/hightop.ftu.v1.DeviceOps/Upgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceOpsClient) SyncFiles(ctx context.Context, in *FileReq, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/hightop.ftu.v1.DeviceOps/SyncFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceOpsServer is the server API for DeviceOps service.
// All implementations must embed UnimplementedDeviceOpsServer
// for forward compatibility
type DeviceOpsServer interface {
	//dam: device manage
	ActivateDevice(context.Context, *ActivateDeviceReq) (*Result, error)
	GetDeviceStatus(context.Context, *Empty) (*DeviceStatusResp, error)
	//params
	GetParam(context.Context, *ParamReq) (*ParamResp, error)
	SetParam(context.Context, *ParamReq) (*ParamResp, error)
	//upgrade
	Upgrade(context.Context, *UpgradeDeviceReq) (*Result, error)
	//files
	SyncFiles(context.Context, *FileReq) (*Result, error)
	mustEmbedUnimplementedDeviceOpsServer()
}

// UnimplementedDeviceOpsServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceOpsServer struct {
}

func (UnimplementedDeviceOpsServer) ActivateDevice(context.Context, *ActivateDeviceReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateDevice not implemented")
}
func (UnimplementedDeviceOpsServer) GetDeviceStatus(context.Context, *Empty) (*DeviceStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStatus not implemented")
}
func (UnimplementedDeviceOpsServer) GetParam(context.Context, *ParamReq) (*ParamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParam not implemented")
}
func (UnimplementedDeviceOpsServer) SetParam(context.Context, *ParamReq) (*ParamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParam not implemented")
}
func (UnimplementedDeviceOpsServer) Upgrade(context.Context, *UpgradeDeviceReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}
func (UnimplementedDeviceOpsServer) SyncFiles(context.Context, *FileReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncFiles not implemented")
}
func (UnimplementedDeviceOpsServer) mustEmbedUnimplementedDeviceOpsServer() {}

// UnsafeDeviceOpsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceOpsServer will
// result in compilation errors.
type UnsafeDeviceOpsServer interface {
	mustEmbedUnimplementedDeviceOpsServer()
}

func RegisterDeviceOpsServer(s grpc.ServiceRegistrar, srv DeviceOpsServer) {
	s.RegisterService(&DeviceOps_ServiceDesc, srv)
}

func _DeviceOps_ActivateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceOpsServer).ActivateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hightop.ftu.v1.DeviceOps/ActivateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceOpsServer).ActivateDevice(ctx, req.(*ActivateDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceOps_GetDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceOpsServer).GetDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hightop.ftu.v1.DeviceOps/GetDeviceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceOpsServer).GetDeviceStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceOps_GetParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceOpsServer).GetParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hightop.ftu.v1.DeviceOps/GetParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceOpsServer).GetParam(ctx, req.(*ParamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceOps_SetParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceOpsServer).SetParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hightop.ftu.v1.DeviceOps/SetParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceOpsServer).SetParam(ctx, req.(*ParamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceOps_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceOpsServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hightop.ftu.v1.DeviceOps/Upgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceOpsServer).Upgrade(ctx, req.(*UpgradeDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceOps_SyncFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceOpsServer).SyncFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hightop.ftu.v1.DeviceOps/SyncFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceOpsServer).SyncFiles(ctx, req.(*FileReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceOps_ServiceDesc is the grpc.ServiceDesc for DeviceOps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceOps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hightop.ftu.v1.DeviceOps",
	HandlerType: (*DeviceOpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivateDevice",
			Handler:    _DeviceOps_ActivateDevice_Handler,
		},
		{
			MethodName: "GetDeviceStatus",
			Handler:    _DeviceOps_GetDeviceStatus_Handler,
		},
		{
			MethodName: "GetParam",
			Handler:    _DeviceOps_GetParam_Handler,
		},
		{
			MethodName: "SetParam",
			Handler:    _DeviceOps_SetParam_Handler,
		},
		{
			MethodName: "Upgrade",
			Handler:    _DeviceOps_Upgrade_Handler,
		},
		{
			MethodName: "SyncFiles",
			Handler:    _DeviceOps_SyncFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hightop/ftu/v1/ftu.proto",
}
